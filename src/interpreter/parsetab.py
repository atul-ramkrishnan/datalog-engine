
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA CONSTANT DOT IMPLICATION LEFT_PAR RIGHT_PAR VARIABLEprogram : facts rules\n                | facts\n                | rulesfacts : facts factfacts :  factfact : block DOTrules : rules rulerules :  rulerule : head IMPLICATION body DOThead : blockbody : blocklistblocklist : blocklist COMMA blockblocklist : blockblock : CONSTANT LEFT_PAR atomlist RIGHT_PARatomlist : atomlist COMMA atomatomlist : atomatom : VARIABLEatom : CONSTANT'
    
_lr_action_items = {'CONSTANT':([0,2,3,4,5,9,10,11,13,14,15,23,24,26,],[8,8,8,-5,-8,8,-4,-7,-6,8,19,-9,8,19,]),'$end':([1,2,3,4,5,9,10,11,13,23,],[0,-2,-3,-5,-8,-1,-4,-7,-6,-9,]),'DOT':([6,16,17,18,25,27,],[13,23,-11,-13,-14,-12,]),'IMPLICATION':([6,7,12,25,],[-10,14,-10,-14,]),'LEFT_PAR':([8,],[15,]),'VARIABLE':([15,26,],[22,22,]),'COMMA':([17,18,19,20,21,22,25,27,28,],[24,-13,-18,26,-16,-17,-14,-12,-15,]),'RIGHT_PAR':([19,20,21,22,28,],[-18,25,-16,-17,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'facts':([0,],[2,]),'rules':([0,2,],[3,9,]),'fact':([0,2,],[4,10,]),'rule':([0,2,3,9,],[5,5,11,11,]),'block':([0,2,3,9,14,24,],[6,6,12,12,18,27,]),'head':([0,2,3,9,],[7,7,7,7,]),'body':([14,],[16,]),'blocklist':([14,],[17,]),'atomlist':([15,],[20,]),'atom':([15,26,],[21,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> facts rules','program',2,'p_program','parser.py',12),
  ('program -> facts','program',1,'p_program','parser.py',13),
  ('program -> rules','program',1,'p_program','parser.py',14),
  ('facts -> facts fact','facts',2,'p_facts_list','parser.py',21),
  ('facts -> fact','facts',1,'p_facts','parser.py',25),
  ('fact -> block DOT','fact',2,'p_fact','parser.py',29),
  ('rules -> rules rule','rules',2,'p_rules_list','parser.py',34),
  ('rules -> rule','rules',1,'p_rules','parser.py',38),
  ('rule -> head IMPLICATION body DOT','rule',4,'p_rule','parser.py',42),
  ('head -> block','head',1,'p_head','parser.py',46),
  ('body -> blocklist','body',1,'p_body','parser.py',50),
  ('blocklist -> blocklist COMMA block','blocklist',3,'p_blocklist1','parser.py',54),
  ('blocklist -> block','blocklist',1,'p_blocklist3','parser.py',58),
  ('block -> CONSTANT LEFT_PAR atomlist RIGHT_PAR','block',4,'p_block','parser.py',62),
  ('atomlist -> atomlist COMMA atom','atomlist',3,'p_atomlist1','parser.py',66),
  ('atomlist -> atom','atomlist',1,'p_atomlist2','parser.py',70),
  ('atom -> VARIABLE','atom',1,'p_atomvariable','parser.py',74),
  ('atom -> CONSTANT','atom',1,'p_atomconstant','parser.py',78),
]
